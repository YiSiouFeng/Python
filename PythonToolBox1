1. Writing your own functions

(1) Write a simple function
-------------------------------------------------------------------------------------
# object1 contains "dataanalysisvisualization", object2 contains 3, object3 contains "111"
# x is a float, y1 is a str, and y2 is a NoneType

# Define the function shout
def shout():
    """Print a string with three exclamation marks"""
    # Concatenate the strings: shout_word
    shout_word = 'congratulations'+'!!!'

    # Print shout_word
    print(shout_word)

# Call shout
shout()
---------------------------------------------------------------------------------------

(2) Single-parameter functions

# Define shout with the parameter, word
def shout(word):
    """Print a string with three exclamation marks"""
    # Concatenate the strings: shout_word
    shout_word = word + '!!!'

    # Print shout_word
    print(shout_word)

# Call shout with the string 'congratulations'
shout('congratulations')
--------------------------------------------------------------------------------------

(3) Functions that return single values

# Define shout with the parameter, word
def shout(word):
    """Return a string with three exclamation marks"""
    # Concatenate the strings: shout_word
    shout_word=word+'!!!'    

    # Replace print with return
    return(shout_word)

# Pass 'congratulations' to shout: yell
yell = shout('congratulations')
# Print yell
print(yell)
--------------------------------------------------------------------------------------

2.Multiple parameters and return values

(4) Functions with multiple parameters

# Define shout with parameters word1 and word2
def shout(word1, word2):
    """Concatenate strings with three exclamation marks"""
    
    # Concatenate word1 with '!!!': shout1
    shout1 = word1+'!!!'    
    # Concatenate word2 with '!!!': shout2
    shout2 = word2+'!!!'
    # Concatenate shout1 with shout2: new_shout
    new_shout=shout1+shout2

    # Return new_shout
    return new_shout

# Pass 'congratulations' and 'you' to shout(): yell
yell = shout('congratulations','you')

# Print yell
print(yell)
--------------------------------------------------------------------------------------

(5) A brief introduction to tuples

# Unpack nums into num1, num2, and num3
num1, num2, num3 = nums

# Construct even_nums
even_nums=(2,num2,num3)
--------------------------------------------------------------------------------------

(6) Functions that return multiple values

# Define shout_all with parameters word1 and word2
def shout_all(word1,word2):
    
    # Concatenate word1 with '!!!': shout1
    shout1 = word1+'!!!'
    
    # Concatenate word2 with '!!!': shout2
    shout2 = word2+'!!!'
    
    # Construct a tuple with shout1 and shout2: shout_words
    shout_words=(shout1,shout2)

    # Return shout_words
    return shout_words

# Pass 'congratulations' and 'you' to shout_all(): yell1, yell2
yell1,yell2 = shout_all('congratulations','you')

# Print yell1 and yell2
print(yell1)
print(yell2)
--------------------------------------------------------------------------------------

(7) Bringing it all together (1)

# Import pandas
import pandas as pd

# Import Twitter data as DataFrame: df
df = pd.read_csv('tweets.csv')

# Initialize an empty dictionary: langs_count
langs_count = {}

# Extract column from DataFrame: col
col = df['lang']

# Iterate over lang column in DataFrame
for entry in col:

    # If the language is in langs_count, add 1 
    if entry in langs_count.keys():
        langs_count[entry] += 1
    # Else add the language to langs_count, set the value to 1
    else:
        langs_count[entry]=1

# Print the populated dictionary
print(langs_count)
--------------------------------------------------------------------------------------

(8) Bringing it all together (2)

# Define count_entries()
def count_entries(df, col_name):
    """Return a dictionary with counts of 
    occurrences as value for each key."""

    # Initialize an empty dictionary: langs_count
    langs_count = {}   
    
    # Extract column from DataFrame: col
    col = df[col_name]
    
    # Iterate over lang column in DataFrame
    for entry in col:

        # If the language is in langs_count, add 1
        if entry in langs_count.keys():
            langs_count[entry] += 1
        # Else add the language to langs_count, set the value to 1
        else:
            langs_count[entry] = 1

    # Return the langs_count dictionary
    return langs_count

# Call count_entries(): result
result = count_entries(tweets_df,'lang')

# Print the result
print(result)

======================================================================================

2.Default arguments, variable-length arguments and scope

(1)Pop quiz on understanding scope

# func1() prints out 3, func2() prints out 10, and the value of num in the global scope is 6
--------------------------------------------------------------------------------------

(2) The keyword global

# Create a string: team
team = "teen titans"

# Define change_team()
def change_team():
    """Change the value of the global variable team."""

    # Use team in global scope
    global team
    # Change the value of team in global: team
    team = 'justice league'

# Print team
print(team)

# Call change_team()
change_team()
# Print team
print(team)
--------------------------------------------------------------------------------------

(3) Nested Functions I

# Define three_shouts
def three_shouts(word1, word2, word3):
    """Returns a tuple of strings
    concatenated with '!!!'."""

    # Define inner
    def inner(word):
        """Returns a string concatenated with '!!!'."""
        return word + '!!!'

    # Return a tuple of strings
    return (inner(word1), inner(word2), inner(word3))

# Call three_shouts() and print
print(three_shouts('a', 'b', 'c'))
--------------------------------------------------------------------------------------

(4) Nested Functions II

# Define echo
def echo(n):
    """Return the inner_echo function."""

    # Define inner_echo
    def inner_echo(word1):
        """Concatenate n copies of word1."""
        echo_word = word1 * n
        return echo_word

    # Return inner_echo
    return inner_echo

# Call echo: twice
twice = echo(2)

# Call echo: thrice
thrice = echo(3)

# Call twice() and thrice() then print
print(twice('hello'), thrice('hello'))
--------------------------------------------------------------------------------------

(5) The keyword nonlocal and nested functions

# Define echo_shout()
def echo_shout(word):
    """Change the value of a nonlocal variable"""
    
    # Concatenate word with itself: echo_word
    echo_word = word*2
    
    # Print echo_word
    print(echo_word)
    
    # Define inner function shout()
    def shout():
        """Alter a variable in the enclosing scope"""    
        # Use echo_word in nonlocal scope
        nonlocal echo_word
        # Change echo_word to echo_word concatenated with '!!!'
        echo_word = echo_word+'!!!'
    
    # Call function shout()
    shout()
    # Print echo_word
    print(echo_word)

# Call function echo_shout() with argument 'hello'
echo_shout('hello')
--------------------------------------------------------------------------------------

(6) Functions with one default argument

# Define shout_echo
def shout_echo(word1,echo=1):
    """Concatenate echo copies of word1 and three
     exclamation marks at the end of the string."""

    # Concatenate echo copies of word1 using *: echo_word
    echo_word = word1*echo
    # Concatenate '!!!' to echo_word: shout_word
    shout_word = echo_word + '!!!'

    # Return shout_word
    return shout_word

# Call shout_echo() with "Hey": no_echo
no_echo = shout_echo('Hey')

# Call shout_echo() with "Hey" and echo=5: with_echo
with_echo = shout_echo('Hey',echo=5)

# Print no_echo and with_echo
print(no_echo)
print(with_echo)
--------------------------------------------------------------------------------------
